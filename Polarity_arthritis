{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["LQwbsO4vhuJE"],"authorship_tag":"ABX9TyPmR/sZWUBvx0N7iFpS386h"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"geiqe6YMHsS6","executionInfo":{"status":"ok","timestamp":1695441696776,"user_tz":-480,"elapsed":2400,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"501058d3-8019-4aa0-e9fc-4ba1692f2ce6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /drive; to attempt to forcibly remount, call drive.mount(\"/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/drive')"]},{"cell_type":"code","source":["cd .."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JG4BaIjKcjry","executionInfo":{"status":"ok","timestamp":1695441715879,"user_tz":-480,"elapsed":4,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"04ff3f9e-17a3-4d6d-9fc9-47bd4e6b229a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/\n"]}]},{"cell_type":"code","source":["cd drive/MyDrive/DrugReviews_ATE"],"metadata":{"id":"UA_lRbryODYL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441717417,"user_tz":-480,"elapsed":3,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"56e86f94-3b9d-4fc4-e2b4-f718d9b2f809"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/drive/MyDrive/DrugReviews_ATE\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","depression_file = 'arthritis.csv'\n","#depression_file = 'depression.csv'\n","df1 = pd.read_csv(depression_file)\n","df1.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2WD8WTnqLrZV","executionInfo":{"status":"ok","timestamp":1695441720814,"user_tz":-480,"elapsed":473,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"12ee8604-738f-4ae1-8618-9b1b16d4405d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 9069 entries, 0 to 9068\n","Data columns (total 5 columns):\n"," #   Column      Non-Null Count  Dtype \n","---  ------      --------------  ----- \n"," 0   Unnamed: 0  9069 non-null   int64 \n"," 1   drugName    9069 non-null   object\n"," 2   Predicted   6608 non-null   object\n"," 3   TRUE        92 non-null     object\n"," 4   review      9069 non-null   object\n","dtypes: int64(1), object(4)\n","memory usage: 354.4+ KB\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"FwxYoI_EKr2w"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Match the column names"],"metadata":{"id":"-Sq_QUu_MVRV"}},{"cell_type":"code","source":["\n","#df1 = df1[['review','PRED']]\n","df1 = df1[['review','Predicted']]\n","#old_column_names = ['review','Predicted']\n","old_column_names = ['review','PRED']\n","new_column_names = ['Review','ATs']\n","df1 = df1.rename(columns=dict(zip(old_column_names, new_column_names)))\n","df1.head(5)\n","df1.describe()\n","df1.info()\n","df1.Review[1]\n","df1.shape"],"metadata":{"id":"3NKJyOw1IFok","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441722618,"user_tz":-480,"elapsed":4,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"5890455a-9f54-43bf-ae44-3d83356c8540"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 9069 entries, 0 to 9068\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   Review  9069 non-null   object\n"," 1   ATs     6608 non-null   object\n","dtypes: object(2)\n","memory usage: 141.8+ KB\n"]},{"output_type":"execute_result","data":{"text/plain":["(9069, 2)"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["df1.iloc[900]['Review']"],"metadata":{"id":"blXFlL_KJAYl","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1695441597266,"user_tz":-480,"elapsed":480,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"a1fd0d96-be5f-4591-e336-36b59fc9a68e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\"I have been taking it for 3 days now in the morning and it is making me fall a sleep in the day. Have to eat something before I take it.\"'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["# Some proprocessing"],"metadata":{"id":"bIJViqHEmlnq"}},{"cell_type":"markdown","source":["###Some empty cells"],"metadata":{"id":"Z2bw6P3ve9YY"}},{"cell_type":"code","source":["#Find the location of non-string values\n","non_string_locations = df1.applymap(lambda x: not isinstance(x, str))\n","\n","# Print rows with non-string values\n","rows_with_non_strings = df1[non_string_locations.any(axis=1)]\n","print(rows_with_non_strings)"],"metadata":{"id":"tpdrmX59eQ8r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441601602,"user_tz":-480,"elapsed":543,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"61aa094c-e2f1-42d4-ce85-5f669fb006af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                                 Review  ATs\n","15    \"I have been taking 50mg of Pristiq for about ...  NaN\n","18                   \"Worked for 2 weeks then stopped.\"  NaN\n","33    \"This medication is a great sedative, if that&...  NaN\n","37    \"I was on this for 5 weeks broke out in hives-...  NaN\n","46    \"That was so strange. I gave up smoking after ...  NaN\n","...                                                 ...  ...\n","9064  \"After a little over two months taking 50mg of...  NaN\n","9065  \"in my third week of 05 mg as add on to Paxil,...  NaN\n","9066  \"I have been on Seroquel for several years and...  NaN\n","9067  \"I have been taking Wellbutrin for a while for...  NaN\n","9068  \"This is the third med I&#039;ve tried for anx...  NaN\n","\n","[2461 rows x 2 columns]\n"]}]},{"cell_type":"markdown","source":["## Drop them"],"metadata":{"id":"8pQTmAOwexeg"}},{"cell_type":"code","source":["#Find the location of non-string values\n","non_string_locations = df1.applymap(lambda x: not isinstance(x, str))\n","\n","# Get indices of rows with non-string values\n","rows_to_drop = non_string_locations.any(axis=1)\n","\n","# Drop rows from DataFrame\n","df1 = df1.drop(df1.index[rows_to_drop])\n","\n","df1.info()"],"metadata":{"id":"qd_BBLfQeoJ2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441613889,"user_tz":-480,"elapsed":310,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"cee8aaf8-e768-44b4-a358-e4716b98f55d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 6608 entries, 0 to 7603\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   Review  6608 non-null   object\n"," 1   ATs     6608 non-null   object\n","dtypes: object(2)\n","memory usage: 154.9+ KB\n"]}]},{"cell_type":"markdown","source":["# **Lets clean the reviews first !!! ðŸ§¹**"],"metadata":{"id":"MX-qqhtgI9ZV"}},{"cell_type":"code","source":["import pandas as pd\n","import re\n","# define a regular expression to match float terms, numbers starting with #, /, digits or with &, and other numeric terms\n","numeric_regex = r'\\b\\d+(\\.\\d+)?\\b|\\b#[\\w]+\\b|\\b/[\\w]+\\b|\\b&[\\w]+\\b'\n","\n","# define a regular expression to match #, &, digit, ;, inside a word\n","special_char_regex = r'\\w*[#&;\\d)()]\\w*'\n","\n","# remove the numeric terms and special characters from the Text column\n","df1['Review'] = df1['Review'].apply(lambda x: re.sub(numeric_regex, '', x))\n","df1['Review'] = df1['Review'].apply(lambda x: re.sub(special_char_regex, lambda m: re.sub(r'[#&;\\d]+', '', m.group(0)), x))\n"],"metadata":{"id":"CHLTjVf9JK0K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df1 = df1[df1['ATs'].notnull() & (df1['ATs'] != '')]\n","df1.shape"],"metadata":{"id":"oKV9tLpyJQue","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441626485,"user_tz":-480,"elapsed":495,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"401cd4da-6c6c-4dac-aa3b-2ff77c5726ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6608, 2)"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["*** Now extract sentences and related aspect terms âš“ ***"],"metadata":{"id":"q8C9J4j5JhZM"}},{"cell_type":"code","source":["# Initialize empty lists to store extracted sentences and corresponding special terms\n","sentences = []\n","terms = []\n","\n","# Iterate over each row in the dataframe\n","for index, row in df1.iterrows():\n","    # Get the review text from the 'Review' column\n","    review = row['Review']\n","\n","    # Get the special terms from the 'Special Terms' column\n","    special_terms = row['ATs']\n","\n","    # Check if the special terms are not missing\n","    if pd.notna(special_terms):\n","        special_terms = special_terms.split(',')\n","\n","        # Iterate over each sentence in the review\n","        for sentence in review.split('.'):\n","            sentence = sentence.strip()\n","            # Check if the sentence contains any special term\n","            if any(term in sentence for term in special_terms):\n","                sentences.append(sentence)\n","                # Find the special terms present in the sentence\n","                sentence_terms = [term for term in special_terms if term in sentence]\n","                terms.append(','.join(sentence_terms))\n","\n","# Create a new dataframe with the extracted sentences and corresponding special terms\n","new_df = pd.DataFrame({'Extracted Sentence': sentences, 'Special_Terms': terms})\n","\n","# Print the new dataframe\n","print(new_df)"],"metadata":{"id":"sORr4UoOJiIn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441632011,"user_tz":-480,"elapsed":901,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"1ef665ae-1321-4221-b135-bf06165aeb8f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                      Extracted Sentence  Special_Terms\n","0      \"I have taken anti-depressants for years, with...  side affects,\n","1               I only take Cymbalta now mostly for pain          pain,\n","2      When I began Deplin, I noticed a major improve...               \n","3      More energy, better disposition, and no sinkin...    depression,\n","4      I have been taking it for about  months now an...               \n","...                                                  ...            ...\n","51362  I tore both of my arms up and hit the closet d...   closet door,\n","51363  I scream in my sleep, I break lamps with my fl...         sleep,\n","51364  Every side effect listed I have!  I fall all t...               \n","51365  This is a terrible medicine!!  Never again!!  ...               \n","51366  What happens now can not be as bad as the side...               \n","\n","[51367 rows x 2 columns]\n"]}]},{"cell_type":"code","source":["new_df = new_df[new_df['Special_Terms'].notnull() & (new_df['Special_Terms'] != '')]\n","new_df.shape"],"metadata":{"id":"9W7cYypQJr6_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441637239,"user_tz":-480,"elapsed":3,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"c9427a8b-f6d8-40c6-e4e0-b00a6786a18e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(16714, 2)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["#Let's check the number of ATs in this data\n","\n","unique_terms_count = new_df['Special_Terms'].nunique()\n","\n","print(\"Number of unique aspect terms':\", unique_terms_count)"],"metadata":{"id":"GZ2QN0Qgfjyg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1695441644301,"user_tz":-480,"elapsed":307,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"0d5ecd3f-b976-4a2f-8fa1-90256954d65a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of unique aspect terms': 3809\n"]}]},{"cell_type":"code","source":["#Reset the index\n","import pandas as pd\n","new_df.reset_index(drop=True, inplace=True)\n","new_df.to_csv('arthritis_processed.csv', index=False)"],"metadata":{"id":"fpIS1JwqKFdu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"Cwwk963ImUYY"}},{"cell_type":"markdown","source":["# Can Begin from **here**::"],"metadata":{"id":"SarRb-amOr2C"}},{"cell_type":"code","source":["import pandas as pd\n","depression_file = 'arthritis_processed.csv'\n","df1 = pd.read_csv(depression_file)\n","df1.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Un9XMEx8KSy5","executionInfo":{"status":"ok","timestamp":1694678482798,"user_tz":-480,"elapsed":967,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"d3e8b69e-a0c2-4197-ceed-632b70e72c2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1391 entries, 0 to 1390\n","Data columns (total 2 columns):\n"," #   Column              Non-Null Count  Dtype \n","---  ------              --------------  ----- \n"," 0   Extracted Sentence  1391 non-null   object\n"," 1   Special_Terms       1391 non-null   object\n","dtypes: object(2)\n","memory usage: 21.9+ KB\n"]}]},{"cell_type":"markdown","source":["###Finally, delete rows with review of size less than 4 words"],"metadata":{"id":"NrUOLLPEKp2E"}},{"cell_type":"code","source":["print('Before',len(df1))\n","df1= df1[df1['Extracted Sentence'].str.split().apply(len) >= 4]\n","print('After',len(df1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A65Yz3EXKq9_","executionInfo":{"status":"ok","timestamp":1694678483702,"user_tz":-480,"elapsed":4,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"80eedf59-249b-433f-b318-572c60df0094"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before 1391\n","After 1386\n"]}]},{"cell_type":"code","source":["#df3 = df1.copy()\n","print('Before',len(df1))\n","df1= df1[df1['Extracted Sentence'].str.split().apply(len) >= 4]\n","df1= df1[df1['Extracted Sentence'].str.split().apply(len) <= 50]\n","print('After',len(df1))\n","df1 = df1.reset_index(drop=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FPIKjYWzKzdh","executionInfo":{"status":"ok","timestamp":1694678486326,"user_tz":-480,"elapsed":311,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"a7653002-1cda-4a00-8cc9-3eca47544fe5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before 1386\n","After 1372\n"]}]},{"cell_type":"code","source":["\"\"\"df1 = df1.head(100)\n","df1.info()\"\"\""],"metadata":{"id":"Q984XKJbL0LV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### ***Remove all commas, they create trouble in matching*** ðŸŒ€"],"metadata":{"id":"6OuW3EhKLjsn"}},{"cell_type":"code","source":["df1['Special_Terms'] = df1['Special_Terms'].str.rstrip(',')\n","df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace(',','')\n","df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace('(','')\n","df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace(')','')\n","df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace('@','')\n","df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace('-','')\n","df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace('\"','')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0-JFNLQzLPQE","executionInfo":{"status":"ok","timestamp":1694678488588,"user_tz":-480,"elapsed":3,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"f794c60c-67bd-4303-e05e-41b49b950b95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-13-060537ff79e0>:3: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n","  df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace('(','')\n","<ipython-input-13-060537ff79e0>:4: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n","  df1['Extracted Sentence'] = df1['Extracted Sentence'].str.replace(')','')\n"]}]},{"cell_type":"code","source":["#df1.iloc[60:70]\n","df1.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nEM1wSnbRXNr","executionInfo":{"status":"ok","timestamp":1694678492236,"user_tz":-480,"elapsed":276,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"981bc6da-4ffe-45d5-b67f-6ad917326f34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1372 entries, 0 to 1371\n","Data columns (total 2 columns):\n"," #   Column              Non-Null Count  Dtype \n","---  ------              --------------  ----- \n"," 0   Extracted Sentence  1372 non-null   object\n"," 1   Special_Terms       1372 non-null   object\n","dtypes: object(2)\n","memory usage: 21.6+ KB\n"]}]},{"cell_type":"markdown","source":["##Add Encoded Aspect Terms\n","\n","\n"],"metadata":{"id":"DebuZuXBN8MD"}},{"cell_type":"code","source":["import pandas as pd\n","from nltk.sentiment import SentimentIntensityAnalyzer\n","\n","# Function to encode tokens based on matching with special terms\n","\n","def encode_tokens(sentence, terms):\n","    sentence_tokens = sentence.lower().split()\n","\n","    encoded_tokens = []\n","    for token in sentence_tokens:\n","        term_tokens = [term.lower().strip() for term in terms.split(',')]\n","\n","        if token in term_tokens:encoded_tokens.append(1)\n","        elif len(term_tokens[0].split()) > 1 and token == term_tokens[0].split()[0]: encoded_tokens.append(1)\n","        elif len(term_tokens[0].split()) > 1 and  token == term_tokens[0].split()[1]: encoded_tokens.append(2)\n","        else:encoded_tokens.append(0)\n","\n","    return encoded_tokens\n","\n","# Add a new column 'Encoded Terms'\n","df1['Encoded Terms'] = df1.apply(lambda row: encode_tokens(row['Extracted Sentence'], row['Special_Terms']), axis=1)\n","\n","# Display the updated dataframe\n","#print(df)"],"metadata":{"id":"Ka6l5CzMMpuP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df1.iloc[11:20]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"id":"-GzJzRxNPaOt","executionInfo":{"status":"ok","timestamp":1694678502983,"user_tz":-480,"elapsed":288,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"766da205-2e0f-41dd-9d1f-43241fbda036"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                   Extracted Sentence     Special_Terms  \\\n","11  This medicine helps relieve all my aches and p...  aches,pains,pain   \n","12  Although I experience severe body and joint pa...        pains,pain   \n","13        I have not suffered any side effects so far           effects   \n","14  It has made a big difference in helping me man...         arthritis   \n","15           y male I have dealt with joint pain  yrs              pain   \n","16   Last  yrs pain increased after walking yard work              pain   \n","17  Worried its a black box drug through! No side ...      side,effects   \n","18                     The side effects were terrible      side effects   \n","19   I had an MRI and wore a heart monitor for  hours     heart monitor   \n","\n","                                        Encoded Terms  \n","11                        [0, 0, 0, 0, 0, 0, 1, 0, 1]  \n","12  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, ...  \n","13                        [0, 0, 0, 0, 0, 0, 1, 0, 0]  \n","14      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]  \n","15                        [0, 0, 0, 0, 0, 0, 0, 1, 0]  \n","16                           [0, 0, 1, 0, 0, 0, 0, 0]  \n","17      [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]  \n","18                                    [0, 1, 2, 0, 0]  \n","19                  [0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0]  "],"text/html":["\n","  <div id=\"df-670fbb47-11ba-4ff8-92cb-f2e48171b23a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Extracted Sentence</th>\n","      <th>Special_Terms</th>\n","      <th>Encoded Terms</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>11</th>\n","      <td>This medicine helps relieve all my aches and p...</td>\n","      <td>aches,pains,pain</td>\n","      <td>[0, 0, 0, 0, 0, 0, 1, 0, 1]</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Although I experience severe body and joint pa...</td>\n","      <td>pains,pain</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>I have not suffered any side effects so far</td>\n","      <td>effects</td>\n","      <td>[0, 0, 0, 0, 0, 0, 1, 0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>It has made a big difference in helping me man...</td>\n","      <td>arthritis</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>y male I have dealt with joint pain  yrs</td>\n","      <td>pain</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 1, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>Last  yrs pain increased after walking yard work</td>\n","      <td>pain</td>\n","      <td>[0, 0, 1, 0, 0, 0, 0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Worried its a black box drug through! No side ...</td>\n","      <td>side,effects</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>The side effects were terrible</td>\n","      <td>side effects</td>\n","      <td>[0, 1, 2, 0, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>I had an MRI and wore a heart monitor for  hours</td>\n","      <td>heart monitor</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-670fbb47-11ba-4ff8-92cb-f2e48171b23a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-670fbb47-11ba-4ff8-92cb-f2e48171b23a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-670fbb47-11ba-4ff8-92cb-f2e48171b23a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-212c02ca-3f3f-4966-a2f7-56754142ab89\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-212c02ca-3f3f-4966-a2f7-56754142ab89')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-212c02ca-3f3f-4966-a2f7-56754142ab89 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","source":["# Finding Sentiment Polarity\n","\n","> Indented block\n","\n"],"metadata":{"id":"XnKCXjZQlZxJ"}},{"cell_type":"code","source":["import nltk\n","nltk.download('stopwords')\n","nltk.download('averaged_perceptron_tagger')\n","from nltk.corpus import wordnet as wn\n","from nltk.corpus import sentiwordnet as swn\n","from nltk.stem import PorterStemmer\n","from nltk.corpus import stopwords\n","nltk.download('sentiwordnet')\n","nltk.download('wordnet')\n","stop_words = set(stopwords.words('english'))\n","stop_words = set(stopwords.words('english')) - {'not', 'very', 'no', 'more', 'so'}\n","\n","def penn_to_wn(tag):\n","    \"\"\"\n","    Convert between the PennTreebank tags to simple Wordnet tags\n","    \"\"\"\n","    tag_mapping = {\n","        'J': wn.ADJ,\n","        'N': wn.NOUN,\n","        'R': wn.ADV,\n","        'V': wn.VERB\n","    }\n","    return tag_mapping.get(tag[0], None)\n","\n","from nltk.stem import WordNetLemmatizer\n","lemmatizer = WordNetLemmatizer()\n","strong_adverbs=[\"very\",\"immensely\",\"extremely\",\"more\",\"much\",\"highly\",\"too\",\"sure\",\"truly\",\"so\"]\n","weak_adverbs=[\"barely\",\"less\",\"hardly\",\"scarcely\", \"scantily\",\"decrease\"]\n","negatives=[\"no\",\"not\",\"Not\",\"No\"]\n","import math\n","def get_sentiment_new(sent):\n","    \"\"\" returns list of pos neg and objective score. But returns empty list if not present in senti wordnet. \"\"\"\n","    words_data=sent.split()\n","    pos_val= nltk.pos_tag(words_data)\n","    #print(pos_val)\n","    #print(type(pos_val))\n","    pos_score=0.0\n","    neg_score=0.0\n","    pos_count=0\n","    neg_count=0\n","    flag=0\n","    score=0.0\n","    for word,tag in pos_val:\n","\n","      #print(word,tag)\n","      #print(type(word),type(tag))\n","      wn_tag = penn_to_wn(tag)\n","      #print(wn_tag)\n","      # To handle modifiers\n","      if wn_tag is None:\n","        pass\n","      elif wn_tag in (wn.ADV) and (word in strong_adverbs):\n","        flag=1\n","\n","      elif wn_tag in (wn.ADV) and (word in weak_adverbs):\n","        flag=2\n","\n","      else:\n","        pass\n","      #To handle negations\n","      if word in negatives:\n","         flag=3\n","\n","\n","\n","      if wn_tag in (wn.ADJ,wn.VERB,wn.NOUN):\n","\n","        lemma = lemmatizer.lemmatize(word, pos=wn_tag)\n","        if not lemma or (lemma in stop_words):\n","          pass\n","\n","        synsets = wn.synsets(word, pos=wn_tag)\n","        if not synsets:\n","          pass\n","        else:\n","          # Take the first sense, the most common\n","          synset = synsets[0]\n","          swn_synset = swn.senti_synset(synset.name())\n","          #print(synset.name())\n","          #print(swn_synset.pos_score(),swn_synset.neg_score(),swn_synset.obj_score())\n","          #count+=1\n","          if swn_synset.obj_score()>=0.75:\n","            pass\n","          elif swn_synset.pos_score()> swn_synset.neg_score():\n","            pos_count+=1\n","            pos_score += swn_synset.pos_score()\n","            pos_score=pos_score/pos_count\n","          else:\n","            neg_count+=1\n","            neg_score+= (1- swn_synset.neg_score())\n","            neg_score=neg_score/neg_count\n","        #print(pos_score,neg_score)\n","          if pos_score >=neg_score:\n","            pos=1\n","          else:\n","            pos=0\n","          #print(\"Flag,tag,Pos and Neg score\")\n","          #print(flag,pos,pos_score,neg_score)\n","\n","          if flag==1 and pos==1: # Concentrator means very,immensely etc\n","            score=1-(1-pos_score) ** 2\n","            flag=0\n","          elif flag==1 and pos==0:\n","            score= 1-math.sqrt(1-neg_score)\n","            flag=0\n","          elif flag==2 and pos==1:\n","            score= 1-math.sqrt(1-pos_score)\n","            flag=0\n","          elif flag==2 and pos==0:\n","            score=1-(1-neg_score) ** 2\n","            flag=0\n","          elif flag==3 and pos==1:\n","            score=1-pos_score\n","            flag=0\n","          elif flag==3 and pos==0:\n","            score=1-neg_score\n","            flag=0\n","          else:\n","            score=max(score,pos_score,neg_score)\n","\n","      #print(score)\n","\n","    return (score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"raUsN_ERQ8-V","executionInfo":{"status":"ok","timestamp":1694678549793,"user_tz":-480,"elapsed":279,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"b01984f4-34d5-4356-cd79-1f0a0eddd630"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n","[nltk_data] Downloading package sentiwordnet to /root/nltk_data...\n","[nltk_data]   Package sentiwordnet is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n"]}]},{"cell_type":"markdown","source":["# Encoding Polarity"],"metadata":{"id":"oysrpkgzlmTa"}},{"cell_type":"code","source":["def polarity_final(sentence, encode):\n","  #print(sentence)\n","  x=get_sentiment_new(sentence)\n","  if x==0.0 or (x>=0.45 and x<0.55):v=1#neutral polarity\n","  elif x>=0.55: v=2 #print(\"Positive\")\n","  elif x<0.45 or x==0:v=0 #print(\"Negative\")\n","  encoded_polarity = []\n","  for encoded in encode:\n","    if encoded ==1 or encoded == 2:\n","      encoded_polarity.append(v)\n","    else: encoded_polarity.append(-1)\n","\n","  return encoded_polarity\n","\n","df1['Polarities'] = df1.apply(lambda row: polarity_final(row['Extracted Sentence'], row['Encoded Terms']), axis=1)"],"metadata":{"id":"ZEi8YnGzc3WG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df1.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"bX17kT7NhgRs","executionInfo":{"status":"ok","timestamp":1694239197986,"user_tz":-480,"elapsed":7,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"f4596403-d523-40b0-ee01-5dc675dc063a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                  Extracted Sentence  \\\n","0  The cost of Embrel is cost of an ordinary pres...   \n","1  I also go to the the medical centre every Satu...   \n","2  I am unsure of the country where people who ha...   \n","3  Like Celebrex and Vioxx this caused blood pres...   \n","4  Too dangerous for me to take because of how hi...   \n","5  I was diagnosed a month ago with rheumatoid ar...   \n","6  I had to stop taking it after a week because i...   \n","7  Im hoping that she can put me on something tha...   \n","8  It began with headaches which got worse every ...   \n","9  Id rather have RA pain then all these debilita...   \n","\n","                                    Special_Terms  \\\n","0                                            cost   \n","1                                            cost   \n","2                                            cost   \n","3  blood pressure,weakness,effects,blood pressure   \n","4                   blood pressure,blood pressure   \n","5                                       arthritis   \n","6                                         stomach   \n","7                                            pain   \n","8                                       headaches   \n","9                                    side effects   \n","\n","                                       Encoded Terms  \\\n","0  [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","1  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","2  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...   \n","3  [0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, ...   \n","4  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...   \n","5                        [0, 0, 0, 0, 0, 0, 0, 0, 1]   \n","6  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...   \n","7  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...   \n","8            [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]   \n","9                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2]   \n","\n","                                          Polarities  \n","0  [-1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,...  \n","1  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...  \n","2  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...  \n","3  [-1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1,...  \n","4  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...  \n","5                [-1, -1, -1, -1, -1, -1, -1, -1, 0]  \n","6  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...  \n","7  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...  \n","8  [-1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1...  \n","9         [-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0]  "],"text/html":["\n","  <div id=\"df-7a2cad37-51cb-4b48-b130-3477b168cc4b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Extracted Sentence</th>\n","      <th>Special_Terms</th>\n","      <th>Encoded Terms</th>\n","      <th>Polarities</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>The cost of Embrel is cost of an ordinary pres...</td>\n","      <td>cost</td>\n","      <td>[0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>[-1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>I also go to the the medical centre every Satu...</td>\n","      <td>cost</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>I am unsure of the country where people who ha...</td>\n","      <td>cost</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...</td>\n","      <td>[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Like Celebrex and Vioxx this caused blood pres...</td>\n","      <td>blood pressure,weakness,effects,blood pressure</td>\n","      <td>[0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, ...</td>\n","      <td>[-1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1,...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Too dangerous for me to take because of how hi...</td>\n","      <td>blood pressure,blood pressure</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ...</td>\n","      <td>[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>I was diagnosed a month ago with rheumatoid ar...</td>\n","      <td>arthritis</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 1]</td>\n","      <td>[-1, -1, -1, -1, -1, -1, -1, -1, 0]</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>I had to stop taking it after a week because i...</td>\n","      <td>stomach</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ...</td>\n","      <td>[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Im hoping that she can put me on something tha...</td>\n","      <td>pain</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...</td>\n","      <td>[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>It began with headaches which got worse every ...</td>\n","      <td>headaches</td>\n","      <td>[0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]</td>\n","      <td>[-1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1...</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>Id rather have RA pain then all these debilita...</td>\n","      <td>side effects</td>\n","      <td>[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2]</td>\n","      <td>[-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7a2cad37-51cb-4b48-b130-3477b168cc4b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7a2cad37-51cb-4b48-b130-3477b168cc4b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7a2cad37-51cb-4b48-b130-3477b168cc4b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ea1a3a07-2768-4a94-8aaa-036f355ca5d3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea1a3a07-2768-4a94-8aaa-036f355ca5d3')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ea1a3a07-2768-4a94-8aaa-036f355ca5d3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":86}]},{"cell_type":"markdown","source":["# Finally Split Sentence in tokens\n","\n"],"metadata":{"id":"zuCuwM7SiCX-"}},{"cell_type":"code","source":["df1[\"Extracted Sentence\"] = df1[\"Extracted Sentence\"].apply(lambda sentence: sentence.lower().split())"],"metadata":{"id":"EcvLREjmiBUz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Save the final annotated data"],"metadata":{"id":"3Qz5UEPNiJT7"}},{"cell_type":"code","source":["df1.reset_index(drop=True, inplace=True)\n","df1.to_csv('/drive/MyDrive/DrugReviews_ATE/arthritis_annotated.csv', index=False)"],"metadata":{"id":"065mgv6_iJsa"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Archieve Code**"],"metadata":{"id":"LQwbsO4vhuJE"}},{"cell_type":"code","source":[],"metadata":{"id":"ljYaN94adA-h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Vader overall sentence score for ploarity"],"metadata":{"id":"wT9DaxXyMuOX"}},{"cell_type":"code","source":["import pandas as pd\n","import nltk\n","nltk.download('vader_lexicon')\n","from nltk.sentiment import SentimentIntensityAnalyzer\n","\n","# Initialize the sentiment analyzer\n","sid = SentimentIntensityAnalyzer()\n","\n","def encode_tokens(sentence, terms):\n","    sentence_tokens = sentence.lower().split()\n","\n","    encoded_tokens = []\n","    sentiment_scores = sid.polarity_scores(sentence)\n","    compound_score = sentiment_scores['compound']\n","    special_terms = [term.lower().strip() for term in terms.split(',')]\n","\n","    for token in sentence_tokens:\n","        if token in special_terms:\n","            if compound_score >= 0.5:\n","                encoded_tokens.append(2)  # Positive polarity\n","            elif compound_score <= -0.05:\n","                encoded_tokens.append(0)  # Negative polarity\n","            else:\n","                encoded_tokens.append(1)  # Neutral polarity\n","        elif len(token.split()) > 1:\n","            two_word_token = token.split()\n","            if two_word_token[0] in special_terms and two_word_token[1] in special_terms:\n","                if compound_score >= 0.5:\n","                    encoded_tokens.extend([2, 2])  # Positive polarity for both words\n","                elif compound_score <= -0.05:\n","                    encoded_tokens.extend([0, 0])  # Negative polarity for both words\n","                else:\n","                    encoded_tokens.extend([1, 1])  # Neutral polarity for both words\n","            else:\n","                encoded_tokens.extend([-1] * len(two_word_token))  # Not a special term\n","        else:\n","            encoded_tokens.append(-1)  # Not a special term\n","\n","    return encoded_tokens\n","\n","\n","\"\"\"# Sample dataframe\n","data = {'Extracted Sentence': ['I have taken anti-depressants for years, with some improvement but mostly moderate to severe side affects, which makes me go off them',\n","                               'I only take Cymbalta now mostly for pain',\n","                               'More energy, better disposition, and no sinking to the low lows of major depression',\n","                               'Best thing, no side effects'],\n","        'Special_Terms': ['side affects', 'pain', 'depression', 'side effects']}\n","df = pd.DataFrame(data)\n","\"\"\"\n","# Add a new column 'Encoded Tokens' with encoded token information\n","df1['Encoded Tokens'] = df1.apply(lambda row: encode_tokens(row['Extracted Sentence'], row['Special_Terms']), axis=1)\n","\n","# Display the updated dataframe\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MYoj2mg3Jd7M","executionInfo":{"status":"ok","timestamp":1692860234050,"user_tz":-480,"elapsed":1024,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"e09b2b82-3887-444f-85ff-1d802d3e6cf3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n","[nltk_data]   Package vader_lexicon is already up-to-date!\n"]},{"output_type":"stream","name":"stdout","text":["                                  Extracted Sentence Special_Terms  \\\n","0  I have taken anti-depressants for years, with ...  side affects   \n","1           I only take Cymbalta now mostly for pain          pain   \n","2  More energy, better disposition, and no sinkin...    depression   \n","3                        Best thing, no side effects  side effects   \n","\n","                                            Polarity  \n","0  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...  \n","1                    [-1, -1, -1, -1, -1, -1, -1, 0]  \n","2  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -...  \n","3                               [-1, -1, -1, -1, -1]  \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import nltk\n","nltk.download('vader_lexicon')\n","from nltk.sentiment import SentimentIntensityAnalyzer\n","\n","# Initialize the sentiment analyzer\n","sid = SentimentIntensityAnalyzer()\n"," #Function to encode tokens based on matching with special terms and polarity\n","def encode_tokens(sentence, terms):\n","    sentence_tokens = sentence.lower().split()\n","\n","    encoded_tokens = []\n","    sentiment_scores = sid.polarity_scores(sentence)\n","    compound_score = sentiment_scores['compound']\n","    for token in sentence_tokens:\n","        term_tokens = [term.lower().strip() for term in terms.split(',')]\n","\n","        if token in term_tokens:\n","\n","            if compound_score >= 0.05:\n","                encoded_tokens.append(2)  # Positive polarity\n","            elif compound_score <= -0.05:\n","                encoded_tokens.append(0)  # Negative polarity\n","            else:\n","                encoded_tokens.append(1)  # Neutral polarity\n","        elif len(term_tokens[0].split()) > 1 and token == term_tokens[0].split()[0]:\n","            encoded_tokens.append(1)\n","        elif len(term_tokens[0].split()) > 1 and token == term_tokens[0].split()[1]:\n","            encoded_tokens.append(2)\n","        else:\n","            encoded_tokens.append(-1)\n","\n","    return encoded_tokens\n","# Add a new column 'Encoded Terms' with polarity information\n","df1['Polarity'] = df1.apply(lambda row: encode_tokens(row['Extracted Sentence'], row['Special_Terms']), axis=1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"niJ68nD2MvEk","executionInfo":{"status":"ok","timestamp":1692779311542,"user_tz":-480,"elapsed":2356,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"7a2a34f0-f6c4-4a12-c3f4-1e36cdbbc2c9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n"]}]},{"cell_type":"markdown","source":["###Finally split sentences to tokens"],"metadata":{"id":"cRbUvr1tNHBr"}},{"cell_type":"code","source":["df1[\"Extracted Sentence\"] = df1[\"Extracted Sentence\"].apply(lambda sentence: sentence.lower().split())"],"metadata":{"id":"A12JPyHIM3YH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df1.iloc[80:90]"],"metadata":{"id":"eZbRdJE0NMxl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Now Store the final data in format"],"metadata":{"id":"m_Hk3xRPNOtn"}},{"cell_type":"code","source":["df1.reset_index(drop=True, inplace=True)\n","df1.to_csv('/drive/MyDrive/DrugReviews_ATE/arthritis_Polarity.csv', index=False)"],"metadata":{"id":"JSmjHIPdNO3h"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"giy0aBX9mGPB"}},{"cell_type":"markdown","source":["##Corrected code for sentiment polarity"],"metadata":{"id":"ZahM53O1aQc0"}},{"cell_type":"code","source":["n=99\n","sentence = df1.loc[n, 'Extracted Sentence']\n","print(sentence)\n","x=get_sentiment_new(sentence)\n","print(\"Final score\",x)\n","if x==0.0 or (x>=0.45 and x<0.55):\n","  print(\"Neutral\")\n","elif x>=0.55:\n","  print(\"Positive\")\n","elif x<0.45 or x==0:\n","  print(\"Negative\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zmokkkoWTITl","executionInfo":{"status":"ok","timestamp":1694237148346,"user_tz":-480,"elapsed":502,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"60ea23e2-acdb-47e2-a1c5-ea60ed1f0c82"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["I had severe swelling and pain in almost every joint of my body which coupled with the exhaustion left me with little life\n","Final score 0.375\n","Negative\n"]}]},{"cell_type":"code","source":["x=get_sentiment_new(sentence)\n","print(\"Final score\",x)\n","if x==0.0:\n","  print(\"Neutral\")\n","elif x>0.5:\n","  print(\"Positive\")\n","else:\n","  print(\"Negative\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bq4TUoiVXaQM","executionInfo":{"status":"ok","timestamp":1694237140051,"user_tz":-480,"elapsed":335,"user":{"displayName":"cmoon cs","userId":"09275099673194383363"}},"outputId":"9c02a114-e74e-478e-9561-40e3bf075ac6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Final score 0.625\n","Positive\n"]}]},{"cell_type":"code","source":["df1.tail(10)"],"metadata":{"id":"VL5LMLa_W4dr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"JCa8wHgniHTC"}}]}